class Solution {
   
    public List<List<Integer>> threeSum(int[] nums) {
     
        int length = nums.length; //total length of array
        Arrays.sort(nums); //sort array min -> max
        System.out.println(Arrays.toString(nums));
        
        HashSet<List<Integer>> triplets = new HashSet<>(); // hashset to avoid duplicates
        
        for(int i = 0; i < (length-2); i++){
            int A = i+1; // start at 1 after begining
            int B = length-1; // start at end
            int C = -nums[i]; // A + B + C = 0 -> A + B = -C
            
            while(A < B){
                //System.out.println("A: " + nums[A] + " B: " + nums[B] + " C: " + C);
                
                long sum = nums[A] + nums[B];
                if(sum == C){ // if equations holds, add to set.
                    List<Integer> list = new LinkedList<>();
                    list.add(nums[i]);
                    list.add(nums[A]);
                    list.add(nums[B]);
                    triplets.add(list);
                }
                
                if(C >= 0 && sum >= C) // since A + B is more than C, move down the higher index (B) so the sum can be lower.
                    B--;
                
                if(C >= 0 && sum < C) // since A + B is less than C, move up the lower index (A) so the sum can be higher.
                    A++;
                
                if(C < 0)
                    break;
            }
            
        }
        
        List<List<Integer>> result = new LinkedList<>();
        
        for(List<Integer> m: triplets){
            result.add(m);
        }
        
        return result;
        
    }
}

/*
import java.util.ArrayList;

class Solution { 
    List<List<Integer>> finalTriplets = new ArrayList<>();
    public List<List<Integer>> threeSum(int[] nums){    
        
        int setSize = 3; 
        int arrayLength = nums.length;
        Arrays.sort(nums);
        // A temporary list to store all combination one by one 
        int[] data = new int[setSize]; 

        // Print all combination using temprary array 'data[]' 
        combinationUtil(nums, data, 0, arrayLength-1, 0, setSize);
        
        return finalTriplets;
    }
    
    arr[] ---> Input Array 
    data[] ---> Temporary array to 
    store current combination 
    start & end ---> Staring and 
    Ending indexes in arr[] 
    index ---> Current index in data[] 
    r ---> Size of a combination to be printed 
    public void combinationUtil(int nums[], int data[], int start, int end, int index, int setSize) 
    { 
        // Current combination is ready 
        // to be printed, print it 
        if (index == setSize){ 
            
            if(data[0] + data[1] + data[2] == 0){
                List<Integer> triplet = Arrays.stream(data).boxed().collect(Collectors.toList());

                if(!finalTriplets.contains(triplet))
                    finalTriplets.add(triplet);
            }        
            
            return; 
        } 

        // replace index with all possible 
        // elements. The condition "end-i+1 >= r-index" 
        // makes sure that including one element 
        // at index will make a combination with 
        // remaining elements at remaining positions 
        for (int i = start; i <= end && (end - i + 1) >= (setSize - index); i++) { 
            data[index] = nums[i]; 
            combinationUtil(nums, data, i+1, end, index+1, setSize); 
        } 
    } 
}


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> finalTriplets = new ArrayList<>();
        //List<Integer> triplets = new ArrayList<Integer>();
        
        Arrays.sort(nums);
        
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                for(int k = j+1; k < nums.length; k++){
                    
                    if((nums[j] + nums[k]) == (-1 * nums[i])){
                        List<Integer> triplets = new ArrayList<Integer>();
                        
                        triplets.add(nums[i]);
                        triplets.add(nums[j]);
                        triplets.add(nums[k]);
                        Collections.sort(triplets);
                        
                        if(!finalTriplets.contains(triplets))
                            finalTriplets.add(triplets);
                    }
                }
            }            
            
        }
        
        return finalTriplets;
    }

}
*/
