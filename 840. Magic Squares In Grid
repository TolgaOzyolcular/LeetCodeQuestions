class Solution {
    public int numMagicSquaresInside(int[][] grid) {
        int magicSquare = 0;

        for(int i = 0; i < grid[0].length-2; i++){
            for(int j = 0; j < grid.length-2; j++){
                
                HashSet<Integer> numbers = new HashSet<Integer>();
                numbers.add(grid[j][i]);
                numbers.add(grid[j][i+1]);
                numbers.add(grid[j][i+2]);
                numbers.add(grid[j+1][i]);
                numbers.add(grid[j+1][i+1]);
                numbers.add(grid[j+1][i+2]);
                numbers.add(grid[j+2][i]);
                numbers.add(grid[j+2][i+1]);
                numbers.add(grid[j+2][i+2]);
                
                if(numbers.size() == 9){
                
                    int row = grid[j][i] + grid[j][i+1] + grid[j][i+2];
                    int row2 = grid[j+1][i] + grid[j+1][i+1] + grid[j+1][i+2];
                    int row3 = grid[j+2][i] + grid[j+2][i+1] + grid[j+2][i+2];

                    int col = grid[j][i] + grid[j+1][i] + grid[j+2][i];
                    int col2 = grid[j][i+1] + grid[j+1][i+1] + grid[j+2][i+1];
                    int col3 = grid[j][i+2] + grid[j+1][i+2] + grid[j+2][i+2];             

                    int diag = grid[j][i] + grid[j+1][i+1] + grid[j+2][i+2];
                    int diag2 =grid[j+2][i] + grid[j+1][i+1] + grid[j][i+2];

                    if(row == row2 && row == row3 && row == col && row == col2 && row == col3 && row == diag && row == diag2)
                        magicSquare++;
                }
            }
        }
        
        return magicSquare;
    }
}
