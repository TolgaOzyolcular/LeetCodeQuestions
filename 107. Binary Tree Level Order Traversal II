/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> tree = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>(); 
        
        if(root == null){
            return tree;
        }
        
        TreeNode current = root;
        queue.add(current);
        
        while(!queue.isEmpty()){
            List<Integer> levels = new ArrayList<Integer>();
            int size = queue.size();
            
            for(int i = 0; i < size; i++){
                current = queue.peek();
                
                if(current.left != null)
                    queue.add(current.left);
                if(current.right != null)
                    queue.add(current.right);
                
                levels.add(queue.poll().val);
            }

            tree.add(levels);
            
        }
        
        Collections.reverse(tree);
        
        return tree;
        
    }
}
